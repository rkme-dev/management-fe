{"remainingRequest":"/Users/mark/projects/enco-fe/node_modules/babel-loader/lib/index.js!/Users/mark/projects/enco-fe/src/service/AxiosInterceptors.js","dependencies":[{"path":"/Users/mark/projects/enco-fe/src/service/AxiosInterceptors.js","mtime":1655104508157},{"path":"/Users/mark/projects/enco-fe/node_modules/cache-loader/dist/cjs.js","mtime":1654587530817},{"path":"/Users/mark/projects/enco-fe/node_modules/babel-loader/lib/index.js","mtime":1654587530760}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9tYXJrL3Byb2plY3RzL2VuY28tZmUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0IFRva2VuU2VydmljZSBmcm9tICdAL3NlcnZpY2UvVG9rZW5TZXJ2aWNlJzsKaW1wb3J0IEF4aW9zSW5zdGFuY2UgZnJvbSAnQC9zZXJ2aWNlL0F4aW9zSW5zdGFuY2UnOwoKdmFyIEF4aW9zSW50ZXJjZXB0b3JzID0gZnVuY3Rpb24gQXhpb3NJbnRlcmNlcHRvcnMoc3RvcmUpIHsKICB2YXIgaXNSZWZyZXNoaW5nID0gZmFsc2U7CiAgdmFyIGZhaWxlZFF1ZXVlID0gW107CgogIHZhciBwcm9jZXNzUXVldWUgPSBmdW5jdGlvbiBwcm9jZXNzUXVldWUoZXJyb3IpIHsKICAgIHZhciB0b2tlbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbnVsbDsKICAgIGZhaWxlZFF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKHByb20pIHsKICAgICAgaWYgKGVycm9yKSB7CiAgICAgICAgcHJvbS5yZWplY3QoZXJyb3IpOwogICAgICB9IGVsc2UgewogICAgICAgIHByb20ucmVzb2x2ZSh0b2tlbik7CiAgICAgIH0KICAgIH0pOwogICAgZmFpbGVkUXVldWUgPSBbXTsKICB9OwoKICBBeGlvc0luc3RhbmNlLmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZShmdW5jdGlvbiAoY29uZmlnKSB7CiAgICB2YXIgdG9rZW4gPSBUb2tlblNlcnZpY2UuZ2V0TG9jYWxBY2Nlc3NUb2tlbigpOwoKICAgIGlmICh0b2tlbikgewogICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ24KICAgICAgY29uZmlnLmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICJCZWFyZXIgIi5jb25jYXQodG9rZW4pOwogICAgfQoKICAgIHJldHVybiBjb25maWc7CiAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpOwogIH0pOwogIEF4aW9zSW5zdGFuY2UuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShmdW5jdGlvbiAocmVzKSB7CiAgICByZXR1cm4gcmVzOwogIH0sIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShlcnIpIHsKICAgICAgdmFyIG9yaWdpbmFsQ29uZmlnLCBycywgYWNjZXNzVG9rZW47CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBvcmlnaW5hbENvbmZpZyA9IGVyci5jb25maWc7CgogICAgICAgICAgICAgIGlmICghKG9yaWdpbmFsQ29uZmlnLnVybCAhPT0gJy9hZG1pbi1sb2dpbicgJiYgb3JpZ2luYWxDb25maWcudXJsICE9PSAnL3JlZnJlc2gtdG9rZW4nICYmIGVyci5yZXNwb25zZSkpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyNzsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgaWYgKCEoZXJyLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxICYmICFvcmlnaW5hbENvbmZpZy5fcmV0cnkpKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjc7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGlmICghaXNSZWZyZXNoaW5nKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgICAgICAgZmFpbGVkUXVldWUucHVzaCh7CiAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHJlc29sdmUsCiAgICAgICAgICAgICAgICAgIHJlamVjdDogcmVqZWN0CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICh0b2tlbikgewogICAgICAgICAgICAgICAgb3JpZ2luYWxDb25maWcuaGVhZGVycy5BdXRob3JpemF0aW9uID0gIkJlYXJlciAiLmNvbmNhdCh0b2tlbik7CiAgICAgICAgICAgICAgICByZXR1cm4gQXhpb3NJbnN0YW5jZShvcmlnaW5hbENvbmZpZyk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3cKICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTsKICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlCiAgICAgICAgICAgICAgb3JpZ2luYWxDb25maWcuX3JldHJ5ID0gdHJ1ZTsKICAgICAgICAgICAgICBpc1JlZnJlc2hpbmcgPSB0cnVlOwogICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA3OwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMDsKICAgICAgICAgICAgICByZXR1cm4gQXhpb3NJbnN0YW5jZS5wb3N0KCcvcmVmcmVzaC10b2tlbicsIHsKICAgICAgICAgICAgICAgIHJlZnJlc2hUb2tlbjogVG9rZW5TZXJ2aWNlLmdldExvY2FsUmVmcmVzaFRva2VuKCkKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgcnMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgIGFjY2Vzc1Rva2VuID0gcnMuZGF0YS5hY2Nlc3NUb2tlbjsKICAgICAgICAgICAgICBzdG9yZS5kaXNwYXRjaCgnQXV0aFN0b3JlL3JlZnJlc2hUb2tlbicsIGFjY2Vzc1Rva2VuKTsKICAgICAgICAgICAgICBUb2tlblNlcnZpY2UudXBkYXRlTG9jYWxBY2Nlc3NUb2tlbih7CiAgICAgICAgICAgICAgICB0b2tlbjogYWNjZXNzVG9rZW4KICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBwcm9jZXNzUXVldWUobnVsbCwgYWNjZXNzVG9rZW4pOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIEF4aW9zSW5zdGFuY2Uob3JpZ2luYWxDb25maWcpKTsKCiAgICAgICAgICAgIGNhc2UgMTg6CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE4OwogICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oNyk7CiAgICAgICAgICAgICAgcHJvY2Vzc1F1ZXVlKGVyciwgbnVsbCk7CiAgICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goJ0F1dGhTdG9yZS9sb2dvdXQnKTsKICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcjL2xvZ2luJzsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBQcm9taXNlLnJlamVjdChfY29udGV4dC50MCkpOwoKICAgICAgICAgICAgY2FzZSAyNDoKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjQ7CiAgICAgICAgICAgICAgaXNSZWZyZXNoaW5nID0gdHJ1ZTsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuZmluaXNoKDI0KTsKCiAgICAgICAgICAgIGNhc2UgMjc6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgUHJvbWlzZS5yZWplY3QoZXJyKSk7CgogICAgICAgICAgICBjYXNlIDI4OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzcsIDE4LCAyNCwgMjddXSk7CiAgICB9KSk7CgogICAgcmV0dXJuIGZ1bmN0aW9uIChfeCkgewogICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfTsKICB9KCkpOwp9OwoKZXhwb3J0IGRlZmF1bHQgQXhpb3NJbnRlcmNlcHRvcnM7"},{"version":3,"sources":["/Users/mark/projects/enco-fe/src/service/AxiosInterceptors.js"],"names":["TokenService","AxiosInstance","AxiosInterceptors","store","isRefreshing","failedQueue","processQueue","error","token","forEach","prom","reject","resolve","interceptors","request","use","config","getLocalAccessToken","headers","Authorization","Promise","response","res","err","originalConfig","url","status","_retry","push","then","catch","post","refreshToken","getLocalRefreshToken","rs","accessToken","data","dispatch","updateLocalAccessToken","window","location","href"],"mappings":"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","sourcesContent":["import TokenService from '@/service/TokenService'\nimport AxiosInstance from '@/service/AxiosInstance'\n\nconst AxiosInterceptors = store => {\n  let isRefreshing = false\n  let failedQueue = []\n\n  const processQueue = (error, token = null) => {\n    failedQueue.forEach(prom => {\n      if (error) {\n        prom.reject(error)\n      } else {\n        prom.resolve(token)\n      }\n    })\n\n    failedQueue = []\n  }\n\n  AxiosInstance.interceptors.request.use(config => {\n    const token = TokenService.getLocalAccessToken()\n    if (token) {\n      // eslint-disable-next-line no-param-reassign\n      config.headers.Authorization = `Bearer ${token}`\n    }\n\n    return config\n  },\n  error => Promise.reject(error))\n  AxiosInstance.interceptors.response.use(\n    res => res,\n    async err => {\n      const originalConfig = err.config\n\n      if ((originalConfig.url !== '/admin-login' && originalConfig.url !== '/refresh-token') && err.response) {\n        // eslint-disable-next-line no-underscore-dangle\n        if (err.response.status === 401 && !originalConfig._retry) {\n          if (isRefreshing) {\n            return new Promise(((resolve, reject) => {\n              failedQueue.push({ resolve, reject })\n            })).then(token => {\n              originalConfig.headers.Authorization = `Bearer ${token}`\n\n              return AxiosInstance(originalConfig)\n              // eslint-disable-next-line no-shadow\n            }).catch(err => Promise.reject(err))\n          }\n\n          // eslint-disable-next-line no-underscore-dangle\n          originalConfig._retry = true\n          isRefreshing = true\n\n          try {\n            const rs = await AxiosInstance.post('/refresh-token', {\n              refreshToken: TokenService.getLocalRefreshToken(),\n            })\n            const { accessToken } = rs.data\n            store.dispatch('AuthStore/refreshToken', accessToken)\n            TokenService.updateLocalAccessToken({ token: accessToken })\n            processQueue(null, accessToken)\n\n            return AxiosInstance(originalConfig)\n          } catch (_error) {\n            processQueue(err, null)\n            store.dispatch('AuthStore/logout')\n            window.location.href = '#/login'\n\n            return Promise.reject(_error)\n          } finally {\n            isRefreshing = true\n          }\n        }\n      }\n\n      return Promise.reject(err)\n    },\n  )\n}\nexport default AxiosInterceptors\n"]}]}